# Main Function that initializes everything and runs the transformation
main = function() {
initialization()
oil <<- rolling_sd(oil$OILPRICE, 10)
oil <<- rolling_mean(oil$OILPRICE, 10)
oil <<- lead_stat(oil$OILPRICE)
oil <<- lag_stat(oil$OILPRICE)
oil <<- difference(oil$OILPRICE)
oil <<- spread(oil$CL10_log, oil$CL11_log)
oil <<- ratio_oil(oil$CL10_log, oil$CL11_log)
oil <<- product_oil(oil$respLAG, oil$SPX_log)
# Here, we can print out the final meta object, which has the transforms listed in the order in which they were executed
print(meta_final)
}
main()
initialization = function() {
data(oil)
meta_final <<- data.frame(matrix(nrow=0, ncol=4))
names(meta_final) <<- c('Transformation', 'Normality', 'Stationarity', 'Correlation w/ Target')
}
#####################
##### Functions #####
#####################
# Function to fill the metadata object with information regarding each transformation.
# Whenever a transform function is called, this function is called as well to add a new row to the metadata object
fill_obs = function (x, y, transform) {
# For normality --> H0: value of interest is normally distributed
norm = shapiro.test(x)$p.value # storing p-values for this, so that we know where we can accept/reject H0
# For stationarity --> H0: value of interest is a stationary univariate time series
station = kpss.test(x)[1,3] # Here we choose the p-value for the type 1 distribution (no drift, no trend). If we wanted different options, we could choose type 2 (drift, no trend)
# or type 3 (drift and trend)
correl = cor(x, y)
record = data.frame(transform, norm, station, correl)
names(record) = c('Transformation', 'Normality', 'Stationarity', 'Correlation w/ Target')
meta_final <<- rbind(meta_final, record)
}
### Transformation functions
# Function to calculate the rolling standard deviation of the target variable
# Parameters:
# x: target variable of interest
# min_obs: minimum number of observations that are used to calculated the rolling standard deviation
rolling_sd = function (x, min_obs) {
oil$roll_sd = roll_sd(x, min_obs, fill = 0, align='right')
obs = fill_obs(oil$roll_sd, x, 'Rolling Standard Deviation')
return(oil)
}
# Function to call the rolling mean of the target variable
# Parameters:
# x: target variable of interest
# min_obs: minimum number of observations that are used to calculated the rolling mean
rolling_mean = function (x, min_obs) {
oil$roll_mean = roll_mean(x, min_obs, fill = 0, align='right')
obs = fill_obs(oil$roll_mean, x, 'Rolling Mean')
return(oil)
}
# Function to calculate the leading value for a target variable
# Parameters:
# x: target variable of interest
lead_stat = function (x) {
oil$leading = lead(x, n=1, default=0)
obs = fill_obs(oil$leading, x, 'Leading Stat')
return(oil)
}
# Function to calculate the lagging value for a target variable
# Parameters:
# x: target variable of interest
lag_stat = function (x) {
oil$lagging = lag(x, n=1, default=0)
obs = fill_obs(oil$lagging, x, 'Lagging Stat')
return(oil)
}
# Function to calculate the difference value for a target variable
# Parameters:
# x: target variable of interest
difference = function (x) {
oil$diff = c(0, diff(x,lag=1))
obs = fill_obs(oil$diff, x, 'Differencing')
return(oil)
}
# Function to calculate the spread between two drivers
# Parameters:
# x: first input driver
# y: second input driver
spread = function (x,y) {
oil$spread = x - y
obs = fill_obs(oil$spread, x, 'Spread between two drivers')
return(oil)
}
# Function to calculate the ratio of two drivers
# Parameters:
# x: first input driver
# y: second input driver
ratio_oil = function (x,y) {
oil$ratio = x / y
obs = fill_obs(oil$ratio, x, 'Ratio of two drivers')
return(oil)
}
# Function to calculate the product of two drivers
# Parameters:
# x: first input driver
# y: second input driver
product_oil = function(x,y) {
oil$product = x * y
obs = fill_obs(oil$product, x, 'Product of two drivers')
return(oil)
}
# Main Function that initializes everything and runs the transformation
main = function() {
initialization()
oil <<- rolling_sd(oil$OILPRICE, 10)
oil <<- rolling_mean(oil$OILPRICE, 10)
oil <<- lead_stat(oil$OILPRICE)
oil <<- lag_stat(oil$OILPRICE)
oil <<- difference(oil$OILPRICE)
oil <<- spread(oil$CL10_log, oil$CL11_log)
oil <<- ratio_oil(oil$CL10_log, oil$CL11_log)
oil <<- product_oil(oil$respLAG, oil$SPX_log)
# Here, we can print out the final meta object, which has the transforms listed in the order in which they were executed
print(meta_final)
}
main()
View(oil)
install.packages(c('gamlss','gamlss.add','gamlss.dist','ggplot2'))
library(gamlss)
library(gamlss.add)
library(gamlss.dist)
library(ggplot2)
install.packages(c("gamlss", "gamlss.add", "gamlss.dist", "ggplot2"))
install.packages(c("gamlss", "gamlss.add", "gamlss.dist", "ggplot2"))
install.packages(c("gamlss", "gamlss.add", "gamlss.dist", "ggplot2"))
install.packages(c("gamlss", "gamlss.add", "gamlss.dist", "ggplot2"))
install.packages(c("gamlss", "gamlss.add", "gamlss.dist", "ggplot2"))
install.packages(c('gamlss','gamlss.add','gamlss.dist','ggplot2'))
library(gamlss)
library(gamlss.add)
library(gamlss.dist)
library(ggplot2)
install.packages(c("gamlss", "gamlss.add", "gamlss.dist", "ggplot2"))
data(oil)
head(oil)
install.packages(c('gamlss','gamlss.add','gamlss.dist','ggplot2'))
library(gamlss)
library(gamlss.add)
library(gamlss.dist)
library(ggplot2)
data(oil)
head(oil)
shash = gamlss(OILPRICE~., family=SHASH, data=oil, trace=FALSE) # shash dist
normal = gamlss(OILPRICE~., family=NO, data=oil, trace=FALSE) # normal dist
expon = gamlss(OILPRICE~., family=EXP, data=oil, trace=FALSE) # exponential dist
logit = gamlss(OILPRICE~., family=LO, data=oil, trace=FALSE) # logistic dist
weibull = gamlss(OILPRICE~., family=WEI, data=oil, trace=FALSE) # weibull dist
expGaus = gamlss(OILPRICE~., family=exGAUS, data=oil, trace=FALSE) # exponential Gaussian dist
invGaus = gamlss(OILPRICE~., family=IG, data=oil, trace=FALSE) # inverse Gaussian dist
powExp = gamlss(OILPRICE~., family=PE, data=oil, trace=FALSE) # power exponential dist
bcpe = gamlss(OILPRICE~., family=BCPE, data=oil, trace=FALSE) # box-cox power exponential dist
bct = gamlss(OILPRICE~., family=BCT, data=oil, trace=FALSE) # box-cox t dist
# Comparison
AIC(shash, normal, expon, logit, weibull, expGaus, invGaus, powExp, bcpe, bct)
# Comparison
AIC(shash, normal, expon, logit, weibull, expGaus, invGaus, powExp, bcpe, bct)
# using the coefficients listed under here, we could predict an approximate oil price tomorrow assuming that we have values (or approximate values) for each of these variables.
summary(powExp)
plot(powExp) # we can see here that the normal q-q plot follows the distribution very well, which helps to indicate that this model fits our data pretty well
rqres.plot(powExp) # Here, we plot this model along multiple different worm plots to check how well it fits our data. All plots seem to match our data pretty well, with some variation (which is to be expected).
tomorrow_vals = data.frame(rbind(colMeans(oil[,-1])))
predict(powExp, newdata=tomorrow_vals)
tomorrow_vals = data.frame(rbind(colMeans(oil[,-1])))
predict(powExp, newdata=tomorrow_vals)
install.packages(c('gamlss','gamlss.add','gamlss.dist'))
install.packages('RcppRoll')
install.packages('dplyr')
install.packages('aTSA')
library(dplyr)
library(gamlss)
library(RcppRoll)
library(aTSA)
initialization = function() {
data(oil)
meta_final <<- data.frame(matrix(nrow=0, ncol=4))
names(meta_final) <<- c('Transformation', 'Normality', 'Stationarity', 'Correlation w/ Target')
}
# Function to fill the metadata object with information regarding each transformation.
# Whenever a transform function is called, this function is called as well to add a new row to the metadata object
fill_obs = function (x, y, transform) {
# For normality --> H0: value of interest is normally distributed
norm = shapiro.test(x)$p.value # storing p-values for this, so that we know where we can accept/reject H0
# For stationarity --> H0: value of interest is a stationary univariate time series
station = kpss.test(x)[1,3] # Here we choose the p-value for the type 1 distribution (no drift, no trend). If we wanted different options, we could choose type 2 (drift, no trend)
# or type 3 (drift and trend)
correl = cor(x, y)
record = data.frame(transform, norm, station, correl)
names(record) = c('Transformation', 'Normality', 'Stationarity', 'Correlation w/ Target')
meta_final <<- rbind(meta_final, record)
}
### Transformation functions
# Function to calculate the rolling standard deviation of the target variable
# Parameters:
# x: target variable of interest
# min_obs: minimum number of observations that are used to calculated the rolling standard deviation
rolling_sd = function (x, min_obs) {
oil$roll_sd = roll_sd(x, min_obs, fill = 0, align='right')
obs = fill_obs(oil$roll_sd, x, 'Rolling Standard Deviation')
return(oil)
}
# Function to call the rolling mean of the target variable
# Parameters:
# x: target variable of interest
# min_obs: minimum number of observations that are used to calculated the rolling mean
rolling_mean = function (x, min_obs) {
oil$roll_mean = roll_mean(x, min_obs, fill = 0, align='right')
obs = fill_obs(oil$roll_mean, x, 'Rolling Mean')
return(oil)
}
# Function to calculate the leading value for a target variable
# Parameters:
# x: target variable of interest
lead_stat = function (x) {
oil$leading = lead(x, n=1, default=0)
obs = fill_obs(oil$leading, x, 'Leading Stat')
return(oil)
}
# Function to calculate the lagging value for a target variable
# Parameters:
# x: target variable of interest
lag_stat = function (x) {
oil$lagging = lag(x, n=1, default=0)
obs = fill_obs(oil$lagging, x, 'Lagging Stat')
return(oil)
}
# Function to calculate the difference value for a target variable
# Parameters:
# x: target variable of interest
difference = function (x) {
oil$diff = c(0, diff(x,lag=1))
obs = fill_obs(oil$diff, x, 'Differencing')
return(oil)
}
# Function to calculate the spread between two drivers
# Parameters:
# x: first input driver
# y: second input driver
spread = function (x,y) {
oil$spread = x - y
obs = fill_obs(oil$spread, x, 'Spread between two drivers')
return(oil)
}
# Function to calculate the ratio of two drivers
# Parameters:
# x: first input driver
# y: second input driver
ratio_oil = function (x,y) {
oil$ratio = x / y
obs = fill_obs(oil$ratio, x, 'Ratio of two drivers')
return(oil)
}
# Function to calculate the product of two drivers
# Parameters:
# x: first input driver
# y: second input driver
product_oil = function(x,y) {
oil$product = x * y
obs = fill_obs(oil$product, x, 'Product of two drivers')
return(oil)
}
# Main Function that initializes everything and runs the transformation
main = function() {
# Initialize our original data and meta object
initialization()
# Ordered transform (this order can be altered if desired)
oil <<- rolling_sd(oil$OILPRICE, 10)
oil <<- rolling_mean(oil$OILPRICE, 10)
oil <<- lead_stat(oil$OILPRICE)
oil <<- lag_stat(oil$OILPRICE)
oil <<- difference(oil$OILPRICE)
oil <<- spread(oil$CL10_log, oil$CL11_log)
oil <<- ratio_oil(oil$CL10_log, oil$CL11_log)
oil <<- product_oil(oil$respLAG, oil$SPX_log)
# Here, we can print out the final meta object, which has the transforms listed in the order in which they were executed
print(meta_final)
}
### Main Function Call
main()
?kpss.test
fill_obs = function (x, y, transform) {
# For normality --> H0: value of interest is normally distributed
norm = shapiro.test(x)$p.value # storing p-values for this, so that we know where we can accept/reject H0
# For stationarity --> H0: value of interest is a stationary univariate time series
station = kpss.test(x,output=FALSE)[1,3] # Here we choose the p-value for the type 1 distribution (no drift, no trend). If we wanted different options, we could choose type 2 (drift, no trend)
# or type 3 (drift and trend)
correl = cor(x, y)
record = data.frame(transform, norm, station, correl)
names(record) = c('Transformation', 'Normality', 'Stationarity', 'Correlation w/ Target')
meta_final <<- rbind(meta_final, record)
}
### Main Function Call
main()
setwd("D:/Coding Projects/R/r-advanced-analytics")
fin <- read.csv("Future 500.csv")
fin <- read.csv("P3-Future-500-The-Dataset.csv")
fin
head(fin)
tail(fin)
str(fin)
summary(fin)
as.factor(fin$ID)
fin$ID <- factor(fin$ID)
fin <- read.csv("P3-Future-500-The-Dataset.csv")
fin$Name <- factor(fin$Name)
fin$Industry <- factor(fin$Industry)
fin$State <- factor(fin$State)
fin$City <- factor(fin$City)
fin$Revenue <- factor(fin$Revenue)
fin$Expenses <- factor(fin$Expenses)
fin$Growth <- factor(fin$Growth)
str(fin)
summary(fin)
fin$ID <- factor(fin$ID)
fin$Inception <- factor(fin$Inception)
as.numeric(fin$Revenue)
# Convert to character first, then numeric
fin$Revenue <- as.numeric(as.character(fin$Revenue))
fin <- read.csv("P3-Future-500-The-Dataset.csv")
fin
head(fin)
tail(fin)
str(fin)
fin$Name <- factor(fin$Name)
fin$Industry <- factor(fin$Industry)
fin$State <- factor(fin$State)
fin$City <- factor(fin$City)
fin$Revenue <- factor(fin$Revenue)
fin$Expenses <- factor(fin$Expenses)
fin$Growth <- factor(fin$Growth)
fin$ID <- factor(fin$ID)
fin$Inception <- factor(fin$Inception)
str(fin)
# sub() and gsub()
fin$Expenses <- gsub(" Dollars","", fin$Expenses)
fin$Expenses <- gsub(",","",fin$Expenses)
head(fin)
fin$Revenue <- gsub("\\$","",fin$Revenue)
fin$Revenue <- gsub(",","",fin$Revenue)
head(fin)
str(fin)
fin$Growth <- gsub("%","",fin$Growth)
head(fin)
str(fin)
fin$Expenses <- as.numeric(fin$Expenses)
fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)
str(fin)
# Basic Import: fin <- read.csv("P3-Future-500-The-Dataset.csv")
fin <- read.csv("P3-Future-500-The-Dataset.csv", na.strings = c(""))
fin
head(fin)
tail(fin)
str(fin)
summary(fin)
fin$Name <- factor(fin$Name)
fin$Industry <- factor(fin$Industry)
fin$State <- factor(fin$State)
fin$City <- factor(fin$City)
fin$Revenue <- factor(fin$Revenue)
fin$Expenses <- factor(fin$Expenses)
fin$Growth <- factor(fin$Growth)
fin$ID <- factor(fin$ID)
fin$Inception <- factor(fin$Inception)
str(fin)
# Factor Variable Trap
as.numeric(fin$Revenue) # Puts the factor levels in as opposed to the actual revenue values
# Convert to character first, then numeric
# sub() and gsub()
# Substitute values for specified inputs
fin$Expenses <- gsub(" Dollars","", fin$Expenses)
fin$Expenses <- gsub(",","",fin$Expenses)
head(fin)
fin$Revenue <- gsub("\\$","",fin$Revenue)
fin$Revenue <- gsub(",","",fin$Revenue)
head(fin)
str(fin)
fin$Growth <- gsub("%","",fin$Growth)
head(fin)
str(fin)
# After removing special characters, these fields have been converted to char data type
# Now we can convert to numeric
fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)
str(fin)
# Missing Data
head(fin, 24)
fin[!complete.cases(fin),]
# Filtering: using which() for non-missing data
fin[fin$Revenue = 9476272]
[fin$Revenue == 9476272]
# Filtering: using which() for non-missing data
fin[fin$Revenue == 9476272,]
# Filtering: using which() for non-missing data
fin[fin$Revenue == 9746272,]
# includes records where revenue is NA
# we can use which() to specify only records where condition is TRUE
fin[which(fin$Revenue == 9746272),]
# Filtering: using is.na() for missing data
fin[is.na(fin$Expenses),]
fin[is.na(fin$State),]
# Backup
fin_backup <- fin
# Removing records w/ missing data
fin[!complete.cases(fin),]
fin[is.na(fin$Industry),]
fin[!is.na(fin$Industry),]
fin <- fin[!is.na(fin$Industry),]
# Resetting the index
fin
rownames(fin) <- NULL
fin
# Replacing missing data: Factual Analysis
fin[!complete.cases(fin),] # All records w/ NA in one or more columns
fin[is.na(fin$State),]
fin[is.na(fin$State) & fin$City == "New York","State"] <- "NY"
fin[is.na(fin$State) & fin$City == "San Fransisco","State"] <- "CA"
fin[is.na(fin$State) & fin$City == "New York",]
fin[!complete.cases(fin),]
fin[is.na(fin$State) & fin$City == "San Francisco","State"] <- "CA"
fin[!complete.cases(fin),]
#Replacing data: Median Imputation
median(fin[fin$Industry == "Retail", "Employees"], na.rm = TRUE)
#Replacing data: Median Imputation
med_emp_retail <- median(fin[fin$Industry == "Retail", "Employees"], na.rm = TRUE)
fin[is.na(fin$Employees) & fin$Industry=="Retail"]
fin[is.na(fin$Employees) & fin$Industry=="Retail",]
fin[is.na(fin$Employees) & fin$Industry=="Retail","Employees"] <- med_emp_retail
head(fin)
med_emp_finserv <- median(fin[fin$Industry == "Financial Services", "Employees"], na.rm = TRUE)
fin[is.na(fin$Employees) & fin$Industry=="Financial Services",]
fin[is.na(fin$Employees) & fin$Industry=="Financial Services","Employees"] <- med_emp_finserv
fin[330,]
fin[!complete.cases(fin),]
med_growth_constr <- median(fin[fin$Industry == "Construction", "Growth"], na.rm = TRUE)
fin[is.na(fin$Growth) & fin$Industry=="Construction",]
fin[is.na(fin$Growth) & fin$Industry=="Construction","Growth"] <- med_growth_constr
head(fin)
fin[8,]
fin[!complete.cases(fin),]
med_rev_constr = median(fin[fin$Industry == "Construction", "Revenue"], na.rm = TRUE)
fin[is.na(fin$Revenue) & fin$Industry=="Construction",]
fin[!complete.cases(fin),]
fin[is.na(fin$Revenue) & fin$Industry=="Construction","Revenue"] <- med_rev_constr
fin[!complete.cases(fin),]
fin[is.na(fin$Revenue) & fin$Industry=="Construction" & is.na(fin$Profit),]
fin[is.na(fin$Expenses) & fin$Industry=="Construction" & is.na(fin$Profit),]
med_exp_constr = median(fin[fin$Industry == "Construction", "Expenses"], na.rm = TRUE)
fin[is.na(fin$Expenses) & fin$Industry=="Construction" & is.na(fin$Profit),]
fin[is.na(fin$Expenses) & fin$Industry=="Construction" & is.na(fin$Profit), "Expenses"] <- med_exp_constr
fin[!complete.cases(fin),]
fin(is.na(fin$Expenses))
fin[is.na(fin$Expenses)]
fin[is.na(fin$Expenses),]
fin[is.na(fin$Expenses),"Expenses"] <- fin[is.na(fin$Expenses),"Revenue"] - fin[is.na(fin$Expenses),"Profit"]
fin[!complete.cases(fin),]
fin[is.na(fin$Profit),"Profit"] <- fin[is.na(fin$Profit),"Revenue"] - fin[is.na(fin$Profit),"Expenses"]
fin[!complete.cases(fin),]
fin[15,]
fin[c(8,42),]
# Visualization
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
p <- ggplot(data=fin)
p + geom_point(aes(x=Revenue, y=Expenses, color=Industry, size=Profit))
d <- ggplot(data=fin, aes(x=Revenue, y=Expenses, color=Industry))
d + geom_point() + geom_smooth(fill=NA, size=1.2)
d + geom_point() + geom_smooth(fill=NA, linewidth=1.2)
f <- ggplot(data=fin, aes(x=Industry, y=Growth, color=Industry))
f + geom_boxplot(size=1)
f + geom_jitter() + geom_boxplot(size=1, alpha=0.5, outlier.color = NA)
machine <- read.csv("P3-Machine_Utilization.csv")
machine <- read.csv("P3-Machine-Utilization.csv")
machine$Utilization <- 1 -machine$Percent.Idle
head(machine)
head(machine, 25)
# Date Times in R
as.POSIXct(machine$Timestamp)
# Date Times in R
as.POSIXct(machine$Timestamp, format="%d/%m/%Y %H:%M")
# Date Times in R
machine$POSIXTime <- as.POSIXct(machine$Timestamp, format="%d/%m/%Y %H:%M")
head(machine, 25)
machine$Timestamp <- NULL
machine <- machine[,c(4,1,2,3)]
head(machine, 25)
# Lists
RL1 <- machine[machine$Machine == "RL1",]
RL1$Machine <- factor(RL1$Machine)
summary(RL1)
util_stats_rl1 = c(min(RL1$Utilization, na.rm=T),
mean(RL1$Utilization, na.rm=T),
max(RL1$Utilization, na.rm=T))
util_stats_rl1
util_under_90 <- length(which(RL1$Utilization) < 0.90) >= 1
util_under_90 <- length(which(RL1$Utilization) < 0.90) > 0
util_under_90 <- length(which(RL1$Utilization < 0.90)) > 0
util_under_90
list_rl1 = list("RL1", util_stats_rl1, util_under_90)
list_rl1
names(list_rl1)
names(list_rl1) <- c("Machine", "Stats", "Low Threshold")
list_rl1
names(list_rl1) <- c("Machine", "Stats", "LowThreshold")
list_rl1
